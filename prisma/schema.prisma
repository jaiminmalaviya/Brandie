// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  username  String   @unique
  email     String   @unique
  password  String
  name      String?
  bio       String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Posts created by this user
  posts Post[]

  // Following relationships - users this user follows
  following Follow[] @relation("UserFollowing")

  // Follower relationships - users who follow this user
  followers Follow[] @relation("UserFollowers")

  // Likes given by this user
  likes Like[]

  @@map("users")
}

model Post {
  id        String   @id @default(cuid())
  text      String
  mediaUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Author of the post
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  // Likes on this post
  likes Like[]

  @@index([authorId])
  @@index([createdAt])
  @@map("posts")
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // User who is following (the follower)
  followerId String
  follower   User   @relation("UserFollowing", fields: [followerId], references: [id], onDelete: Cascade)

  // User being followed (the followee)
  followeeId String
  followee   User   @relation("UserFollowers", fields: [followeeId], references: [id], onDelete: Cascade)

  @@unique([followerId, followeeId])
  @@index([followerId])
  @@index([followeeId])
  @@map("follows")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // User who liked the post
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Post that was liked
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([userId])
  @@index([postId])
  @@map("likes")
}
